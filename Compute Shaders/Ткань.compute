#pragma kernel KernelFunction_A


RWTexture2D<float4> textureBuffer;
RWStructuredBuffer<uint> randData: register(u0);// длина 512 фэйковый рандом

uint rand(uint x, uint y, uint z)
{
		uint x0 =(256+(x%256))%256;
		uint y0 =(256+(y%256))%256;
		uint z0 =(256+(z%256))%256;	
		return randData[ x0 + randData[ y0 + randData[ z0 ] ] ]; 	
}

float fade(float t) {
 		return t*t*t*(t*(t*6-15)+10);
	}

float weight(float3 pos)
	{	
	//длина ябучего вектора, максимальная длинна корень из трех
	// то есть длину вектора надо умножить на 1/кореньиз трех
	float Length = length(pos)*0,5773502691f;
	
		return fade(1-Length);
	} 

float BetterNoise(float3 pos){//градиентный шум как он есть.
		uint x0 = floor(pos.x);
		uint y0 = floor(pos.y);
		uint z0 = floor(pos.z);
		//смещение внутри ячейки
		float dx = pos.x-x0;
		float dy = pos.y-y0;
		float dz = pos.z-z0;
		//читаю 8 точек из фэйкового рандома значение их 0 512
		//для каждой точки вычисляю вес как единица минус расстояние деленное на корень из двух
		//так количество коэффициента может быть больше единицы то надо будет нормализовать это
		//к виду в котором сумма весов 8  векторов будет 1
		uint x000 = rand(x0,y0,z0);
		float length000 = length(float3(dx,dy,dz));
		uint x001 = rand(x0,y0,z0+1);
		float length001 = length(float3(dx,dy,1-dz));
		uint x010 = rand(x0,y0+1,z0);
		float length010 = length(float3(dx,1-dy,dz));
		uint x011 = rand(x0,y0+1,z0+1);
		float length011 = length(float3(dx,1-dy,1-dz));
		uint x100 = rand(x0+1,y0,z0);
		float length100 = length(float3(1-dx,dy,dz));
		uint x101 = rand(x0+1,y0,z0+1);
		float length101 = length(float3(1-dx,dy,1-dz));
		uint x110 = rand(x0+1,y0+1,z0);
		float length110 = length(float3(1-dx,1-dy,dz));
		uint x111 = rand(x0+1,y0+1,z0+1);	
		float length111 = length(float3(1-dx,1-dy,1-dz));

				//смешиваю
		float k01 = length000/(length000+length111);
		float dif00 = lerp(x000,x111,fade(k01));

		float k02 = length010/(length010+length101);
		float dif01 = lerp(x010,x101,fade(k02));
		
		float k03 = length001/(length001+length110);
		float dif10 = lerp(x001,x110,fade(k03));

		float k04 = length001/(length001+length110);
		float dif11 = lerp(x001,x110,fade(k04));
		
		return 0.001953125f*(dif00+dif01+dif10+dif11)/(k01+k02+k03+k04);//вывод (0...1)

	}




float getHeight(float3 pos){// summing of noise octaves untill it become nice enought
		uint numberOfOctaves = 9;
		float sum = 0;		
		for(uint i = 1; i<=numberOfOctaves; i++){
			sum = sum + pow((2 * noise( pos * i * i ) - 1),1)/i;
		}
		return 0.5f+0.05f*sum;
	}



[numthreads(8, 8, 1)]
void KernelFunction_A(uint3 dispatchThreadID : SV_DispatchThreadID)
{
    // SV_DispathThreadID は、SV_Group_ID * numthreads + GroupThreadID です。

    float width, height;
    textureBuffer.GetDimensions(width, height);
	float Noise = getHeight(dispatchThreadID.xyz*0.005f);
	if(Noise>0.5f){	textureBuffer[dispatchThreadID.xy] =float4(Noise*0.5,Noise*0.75,Noise*0.25,1);}
	else{textureBuffer[dispatchThreadID.xy] =float4(Noise*0.25,Noise*0.5,Noise*2,1);}

	Noise = 1-BetterNoise(dispatchThreadID.xyz*0.5f);
	textureBuffer[dispatchThreadID.xy] =float4(0.5f*Noise,0.65f*Noise,Noise,1);
}


