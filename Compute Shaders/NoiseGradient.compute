#pragma kernel KernelFunction_A


RWTexture2D<float4> textureBuffer;
RWStructuredBuffer<uint> randData: register(u0);// длина 512 фэйковый рандом значения до 256 внутри

uint rand(uint x, uint y, uint z)
{
		uint x0 =(256+(x%256))%256;
		uint y0 =(256+(y%256))%256;
		uint z0 =(256+(z%256))%256;	
		return randData[ x0 + randData[ y0 + randData[ z0 ] ] ]; 	
}

float fade(float t) {
		return 1-(cos(t*3.141592653f)+1)*0.5f;
	}

float noise(float3 pos){//градиентный шум как он есть.
		uint x0 = floor(pos.x);
		uint y0 = floor(pos.y);
		uint z0 = floor(pos.z);
		//смещение внутри ячейки
		float dx = pos.x-x0;
		float dy = pos.y-y0;
		float dz = pos.z-z0;
		//читаю 8 точек из фэйкового рандома
		uint x000 = rand(x0,y0,z0);
		uint x001 = rand(x0,y0,z0+1);
		uint x010 = rand(x0,y0+1,z0);
		uint x011 = rand(x0,y0+1,z0+1);
		uint x100 = rand(x0+1,y0,z0);
		uint x101 = rand(x0+1,y0,z0+1);
		uint x110 = rand(x0+1,y0+1,z0);
		uint x111 = rand(x0+1,y0+1,z0+1);	
		//смешиваю

		float dif00 = x000*fade(1-dz)+x001*fade(dz);
		float dif01 = x010*fade(1-dz)+x011*fade(dz);
		float diff0 = dif00*fade(1-dy)+dif01*fade(dy);

		float dif10 = x100*fade(1-dz)+x101*fade(dz);
		float dif11 = x110*fade(1-dz)+x111*fade(dz);
		float diff1 = dif10*fade(1-dy)+dif11*fade(dy);
		
		float result = diff0*fade(1-dx)+diff1*fade(dx);//(0...1)
		return result*0.0039215686274509803921568627451f;
	}

float getHeight(float3 pos){// summing of noise octaves untill it become nice enought
		uint numberOfOctaves = 6;
		float sum = 0;		
		for(uint i = 1; i<=numberOfOctaves; i++){
			sum = sum + pow((2 * noise( pos * i * i ) - 1),1)/i;
		}
		return 0.5f+0.05f*sum;
	}


[numthreads(8, 8, 1)]
void KernelFunction_A(uint3 dispatchThreadID : SV_DispatchThreadID)
{
    // SV_DispathThreadID は、SV_Group_ID * numthreads + GroupThreadID です。

    float width, height;
    textureBuffer.GetDimensions(width, height);

	//float3 pos = float3(5,dispatchThreadID.x, dispatchThreadID.y);
	//float Noise = noise(pos*0.001f);
	float Noise = getHeight(dispatchThreadID.xyz*0.005f);
	//textureBuffer[dispatchThreadID.xy] =float4(Noise,Noise,Noise,1);
	if(Noise>0.5f){	textureBuffer[dispatchThreadID.xy] =float4(Noise*0.5,Noise*0.75,Noise*0.25,1);}
	else{textureBuffer[dispatchThreadID.xy] =float4(Noise*0.25,Noise*0.5,Noise*2,1);}

/*
	//just to show that still all fine
	float x=dispatchThreadID.x / width-0.5f;
	float y=dispatchThreadID.y / width-0.5f;
	float radius = 0.25f;

	if( x*x+y*y >= 0.0625 && x*x+y*y <= 0.065 ){textureBuffer[dispatchThreadID.xy] = float4(15,0,13,1);}
	if(
		dispatchThreadID.x<=3 ||
		dispatchThreadID.x>=width-4 ||
		dispatchThreadID.y<=3 ||
		dispatchThreadID.y>=width-4
	){
		textureBuffer[dispatchThreadID.xy] = float4(0.5,0.32,0.1,1);
	}
*/
}

